using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;


namespace CustomControl
{
    public partial class Timeline : Control
    {      
        private static class TopPanel
        {
            private static Point _Location = new Point(0, 0);
            private static Size _Size = new Size(0, 0);
            private static Size _ButtonSize = new Size(0, 0);
            //private static Button _Undo;
            //private static Button _Redo;
            //private static Button _Delete;
            //private static Button _Cut;
            //private static Button _Time;
            private static Rectangle _TopPanelBox = new Rectangle();
            private static Color _TopPanelColor = new Color();
            private static SolidBrush _TopPanelBrush;

            //private static Button 

            public static Point Location
            {
                get
                {
                    return _Location;
                }
                set
                {
                    _Location = value;
                    _TopPanelBox.Location = _Location;
                }
            }

            public static int X
            {
                get
                {
                    return _Location.X;
                }
                set
                {
                    _Location.X = value;
                    _TopPanelBox.X = _Location.X;
                }
            }

            public static int Y
            {
                get
                {
                    return _Location.Y;
                }
                set
                {
                    _Location.Y = value;
                    _TopPanelBox.Y = _Location.Y;
                }
            }

            public static Size Size
            {
                get
                {
                    return _Size;
                }
                set
                {
                    _Size = value;
                    _TopPanelBox.Size = _Size;
                }
            }

            public static int Width
            {
                get
                {
                    return _Size.Width;
                }
                set
                {
                    _Size.Width = value;
                    _TopPanelBox.Width = _Size.Width;
                }
            }

            public static int Height
            {
                get
                {
                    return _Size.Height;
                }
                set
                {
                    _Size.Height = value;
                    _TopPanelBox.Height = _Size.Height;
                }
            }

            public static Size ButtonSize
            {
                get
                {
                    return _ButtonSize;
                }
                set
                {
                    _ButtonSize = value;
                }
            }

            public static Color Color
            {
                get
                {
                    return _TopPanelColor;
                }
                set
                {
                    _TopPanelColor = value;
                    _TopPanelBrush.Color = _TopPanelColor;
                }
            }

            static TopPanel()
            {
                _TopPanelBox = new Rectangle();
                Location = new Point(0, 0);
                Size = new Size(0, 0);
                _TopPanelBrush = new SolidBrush(Color.Aqua);
                Color = Color.Aqua;
            }

            public static void Draw(PaintEventArgs pe)
            {
                pe.Graphics.FillRectangle(_TopPanelBrush, _TopPanelBox);
            }
        }

        private  class Ruler
        {
            Point Location;
            Size Size;
            int Unit;
            int HalfUnit;
            int TenthUnit;
            Pen Pen;

            public Ruler()
            {
                Location = new Point(0, 0);
                Size = new Size(500, 20);
                Unit = 100;
                HalfUnit = Unit / 2;
                TenthUnit = Unit / 10;
                Pen = new Pen(Color.Black);
            }

            public void Draw(PaintEventArgs pe)
            {
                Point Current = Location;
                Current.Y += Size.Height;
                SolidBrush B = new SolidBrush(Color.Blue);
                PointF[] Seek = new PointF[5] {new PointF(0,0), new PointF(10, 0), new PointF(10, 10) , new PointF(5, 15) , new PointF(0, 10) };  
                for(int i=0; i < Size.Width/Unit; i++)
                {
                    pe.Graphics.DrawLine(Pen,Current.X,Current.Y,Current.X + Unit,Current.Y);
                    pe.Graphics.DrawLine(Pen,Current.X, Current.Y- Size.Height, Current.X, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + HalfUnit, Current.Y - Size.Height/2, Current.X + HalfUnit, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit, Current.Y - Size.Height / 3, Current.X + TenthUnit, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit*2, Current.Y - Size.Height / 3, Current.X + TenthUnit*2, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit * 3, Current.Y - Size.Height / 3, Current.X + TenthUnit * 3, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit * 4, Current.Y - Size.Height / 3, Current.X + TenthUnit * 4, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit * 6, Current.Y - Size.Height / 3, Current.X + TenthUnit * 6, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit * 7, Current.Y - Size.Height / 3, Current.X + TenthUnit * 7, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit * 8, Current.Y - Size.Height / 3, Current.X + TenthUnit * 8, Current.Y);
                    pe.Graphics.DrawLine(Pen, Current.X + TenthUnit * 9, Current.Y - Size.Height / 3, Current.X + TenthUnit * 9, Current.Y);
                    Current.X +=  Unit;
                }
                pe.Graphics.FillPolygon(B,Seek);
            }        
        }

        private static class Seek
        {
            private static int _Value;
            private static int _Count;
            public static int Value
            {
                get
                {
                    return _Value;
                }
                set
                {
                    _Value = value;
                    Line.X = _Value + 84;
                    Line.Height = (_Count * TrackSize.Height);
                }
            }
            public static Rectangle Line = new Rectangle(84, 45, 3, 0);
            public static SolidBrush Brush = new SolidBrush(Color.Black);
            public static int Count
            {
                get
                {
                    return _Count;
                }
                set
                {
                    _Count = value;
                    Line.Height = _Count * TrackSize.Height;
                }
            }

            static Seek()
            {
                Count = 0;
                Value = 0;
            }

            public static void Draw(PaintEventArgs pe)
            {
                pe.Graphics.FillRectangle(Brush, Line);
            }
        }

        private static class Drag
        {
            private static Point _InitialLocation = new Point(-1, -1);

            private static Point _FinalLocation = new Point(-1, -1);

            public static Point InitialLocation
            {
                get
                {
                    return _InitialLocation;
                }
                set
                {
                    _InitialLocation = value;
                }
            }

            public static Point FinalLocation
            {
                get
                {
                    return _FinalLocation;
                }
                set
                {
                    _FinalLocation = value;
                    Change();
                }
            }

            public static int InitialTrack { get; set; } = 0;

            public static int InitialTrackObject { get; set; } = 0;

            public static int FinalTrack { get; set; } = 0;

            public static int FinalTrackObject { get; set; } = 0;

            public static int ChangeX { get; set; } = 0;

            public static int ChangeY { get; set; } = 0;

            public static bool MoveRight { get; set; } = false;

            public static bool MoveLeft { get; set; } = false;

            public static bool MoveCenterX { get; set; } = false;

            public static bool MoveCenterY { get; set; } = false;

            public static bool MoveTopDown { get; set; } = false;

            public static TrackObject TO { get; set; } = new TrackObject();

            private static void Change()
            {
                if (InitialLocation == FinalLocation)
                {

                }
                else
                {
                    ChangeX = FinalLocation.X - InitialLocation.X;
                    ChangeY = FinalLocation.Y - InitialLocation.Y;
                }
            }

            public static void Reset()
            {
                InitialLocation = new Point(-1, -1);
                FinalLocation = new Point(-1, -1);
                InitialTrack = 0;
                InitialTrackObject = 0;
                FinalTrack = 0;
                FinalTrackObject = 0;
                ChangeX = 0;
                ChangeY = 0;
                MoveRight = false;
                MoveLeft = false;
                MoveCenterX = false;
                MoveCenterY = false;
                MoveTopDown = false;
            }
        }

        private class TrackObject
        {
            private Point _Location;
            private int _Width;
            private Rectangle TrackObjectBox;
            private Rectangle TrackObjectBorder;
            private string _Type;
            public Point Location
            {
                get
                {
                    return _Location;
                }
                set
                {
                    _Location = value;
                    TrackObjectBox.Location = _Location;
                    TrackObjectBorder.Location = _Location;
                }
            }
            public int X
            {
                get
                {
                    return _Location.X;
                }
                set
                {
                    _Location.X = value;
                    TrackObjectBox.X = _Location.X;
                    TrackObjectBorder.X = _Location.X;
                }
            }
            public int Y
            {
                get
                {
                    return _Location.Y;
                }
                set
                {
                    _Location.Y = value;
                }
            }
            public Size Size
            {
                get
                {
                    return new Size(_Width, Height);
                }
                set
                {
                    _Width = value.Width;
                    Height = value.Height;
                }

            }
            public static int Height { get; set; }
            public int Width
            {
                get
                {
                    return _Width;
                }
                set
                {
                    _Width = value;
                    TrackObjectBox.Width = _Width;
                    TrackObjectBorder.Width = _Width - 2;
                }
            }
            public static int SeekValue { get; set; }
            public String Type
            {
                get
                {
                    return _Type;
                }
                set
                {
                    _Type = value;
                }
            }

            public TrackObject()
            {

            }

            public TrackObject(Point Location, int Width, int SeekValue)
            {
                this.Location = Location;
                this.Width = Width;
                TrackObject.Height = Track.TrackBoxSize.Height;
                this.TrackObjectBox = new Rectangle(Location, this.Size);
                this.TrackObjectBorder = new Rectangle(Location.X, Location.Y, this.Width - 2, TrackObject.Height - 2);
                TrackObject.SeekValue = SeekValue;
                this.Type = "Default";
            }

            public TrackObject(int X, int Y, int Width, int SeekValue)
            {
                this.X = X;
                this.Y = Y;
                this.Width = Width;
                TrackObject.Height = Track.TrackBoxSize.Height;
                this.TrackObjectBox = new Rectangle(Location, this.Size);
                this.TrackObjectBorder = new Rectangle(Location.X, Location.Y, this.Width - 2, TrackObject.Height - 2);
                TrackObject.SeekValue = SeekValue;
                Type = "Default";
            }

            public void DrawTrackObject(PaintEventArgs pe)
            {
                SeekValue = Seek.Value;
                SolidBrush B = new SolidBrush(Color.Yellow);
                Pen P = new Pen(Color.Black);
                P.Width = 2;
                pe.Graphics.FillRectangle(B, TrackObjectBox);
                pe.Graphics.DrawRectangle(P, TrackObjectBorder);
            }


            public void ResizeRight(int X)
            {
                if (this.Width + X > 10 && this.Width + X <= 500)
                {
                    this.Width = X + this.Width;
                }
            }

            public void ResizeLeft(int X)
            {
                Point Location = this.Location;
                Location.X = Location.X + X;
                this.Location = Location;
                this.Width = (X * (-1)) + this.Width;
            }

            public bool Contains(Point MouseLocation)
            {
                Rectangle Inner = new Rectangle(this.TrackObjectBorder.X + 2, this.TrackObjectBorder.Y + 2, TrackObjectBorder.Width - 4, TrackObjectBorder.Width - 2);
                if (Inner.Contains(MouseLocation))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public bool ContainsBR(Point MouseLocation)
            {
                Rectangle Right = new Rectangle(X + Width - 2, Y, 2, Height);

                if (Right.Contains(MouseLocation))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public bool ContainsBL(Point MouseLocation)
            {
                Rectangle Left = new Rectangle(X - 2, Y, 2, Height);

                if (Left.Contains(MouseLocation))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public void Move(int X)
            {
                this.X = this.X + X;
            }
        }

        private class Track
        {
            private Point _Location;
            public Point Location
            {
                get
                {
                    return _Location;
                }
                set
                {
                    _Location = value;
                    TrackBoxLocation = _Location;
                }
            }
            public int X
            {
                get
                {
                    return _Location.X;
                }
                set
                {
                    _Location.X = value;
                    TrackBoxLocation = _Location;
                }
            }
            public int Y
            {
                get
                {
                    return _Location.Y;
                }
                set
                {
                    _Location.Y = value;
                    TrackBoxLocation = _Location;
                }
            }
            public string Type;
            public static Font TypeFont;
            public static int SeekValue;
            public Rectangle TrackBox;
            public static Size TrackBoxSize;
            private Point _TrackBoxLocation;
            public Point TrackBoxLocation
            {
                get
                {
                    return _TrackBoxLocation;
                }
                set
                {
                    _TrackBoxLocation = value;
                    _TrackBoxLocation.X = _TrackBoxLocation.X + 84;
                    _TrackBoxLocation.Y = _TrackBoxLocation.Y;
                    TrackBox.Location = _TrackBoxLocation;
                }

            }
            public static int TrackBoxSizeHieght
            {
                get
                {
                    return TrackBoxSize.Height;
                }
                set
                {
                    TrackBoxSize.Height = value;

                }
            }

            public List<TrackObject> TrackObjects;
            public SolidBrush TrackBoxBrush;
            //private Icon  TrackIcon;        
            //private Button MoveUp;
            //private Button MoveDown;


            public Track()
            {

            }

            public Track(string Type, Point Location, int SeekValue, Color TrackBoxBrushColor)
            {
                this.Type = Type;
                this.Location = Location;
                Track.SeekValue = SeekValue;
                Track.TypeFont = new Font(new FontFamily("Arial"), 10, FontStyle.Regular);
                Track.TrackBoxSize = new Size(TrackSize.Width, TrackSize.Height);
                this.TrackBoxLocation = new Point(this.Location.X, this.Location.Y);
                TrackBox = new Rectangle(this.TrackBoxLocation, Track.TrackBoxSize);
                TrackObjects = new List<TrackObject>();
                this.TrackBoxBrush = new SolidBrush(TrackBoxBrushColor);

                //  this.MoveDown = MoveDown;
                //this.MoveUp = MoveUp;
            }

            public Track(string Type, Point Location, int SeekValue)
            {
                this.Type = Type;
                this.Location = Location;
                Track.SeekValue = SeekValue;
                Track.TypeFont = new Font(new FontFamily("Arial"), 10, FontStyle.Regular);
                Track.TrackBoxSize = new Size(500, 50);
                this.TrackBoxLocation = new Point(this.Location.X, this.Location.Y);
                TrackBox = new Rectangle(this.TrackBoxLocation, Track.TrackBoxSize);
                TrackObjects = new List<TrackObject>();
                TrackBoxBrush = new SolidBrush(Color.Gray);
                //TrackRightClickContextMenuStrip = new ContextMenuStrip();

            }

            public void DrawTrack(PaintEventArgs pe)
            {
                SolidBrush B = new SolidBrush(Color.Black);
                SeekValue = Seek.Value;
                TrackBoxSize.Height = TrackSize.Height;
                TrackBox.Height = TrackBoxSize.Height;
                pe.Graphics.DrawString(Type, TypeFont, B, Location);
                pe.Graphics.FillRectangle(TrackBoxBrush, TrackBox);
                for (int i = 0; i < TrackObjects.Count; i++)
                {
                    TrackObjects[i].DrawTrackObject(pe);
                }
            }

            public void TrackRightClick()
            {

                TrackObject T = new TrackObject(TrackBox.Location.X + (TrackObjects.Count * 100), TrackBox.Location.Y, 100, SeekValue);
                TrackObjects.Add(T);
            }

            public void AddTrackObject(TrackObject TO)
            {
                TO.Location = this.TrackBox.Location;
                this.TrackObjects.Add(TO);
            }

            public bool Contains(Point P)
            {
                if (TrackBox.Contains(P))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public bool ContainsBorder(Point P)
            {
                Rectangle Top = new Rectangle(_TrackBoxLocation.X, _TrackBoxLocation.Y, _TrackSize.Width, 2);
                Rectangle Bottom = new Rectangle(_TrackBoxLocation.X, _TrackBoxLocation.Y + _TrackSize.Height - 2, _TrackSize.Width, 2);
                if (Top.Contains(P) || Bottom.Contains(P))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
    
        private TrackBar TrackBarTimeline;

        //Point TrackBarLocation;
        

        private List<Track> Tracks;

        private static Size _TrackSize;

        public static Size TrackSize
        {
            get
            {
                return _TrackSize;
            }
            set
            {
                _TrackSize = value;
            }
        }

        public Point TrackLocation
        {
            get;
            set;
        }

        private Button AddTrack;

        private VScrollBar VerticalTrackScrollBar;

        ContextMenuStrip TrackRightClickContextMenuStrip;

        Point RightClickLocation;

        public void TrackBarValueChanged(object sender, EventArgs e)
        {
            Seek.Value = 84 + TrackBarTimeline.Value;
            Invalidate(Seek.Line);
            Refresh();
        }

        public void AddTrackUniversal()
        {
            Point P = new Point(0, Tracks.Count * TrackSize.Height + 45);
            Track T;
            if (Tracks.Count % 2 == 0)
            {
                T = new Track("Video", P, 0, Color.Gray);
            }
            else
            {
                T = new Track("Video", P, 0, Color.Red);
            }

            Tracks.Add(T);
            if (VerticalTrackScrollBar != null)
            {
                VerticalTrackScrollBar.ValueChanged += VerticalTrackScrollBarValueChanged;
            }
            Refresh();
        }

        public void AddTrackUniversal(String Type)
        {
            Point P = new Point(0, TrackSize.Height * Tracks.Count + 45);
            Track T;
            if (Tracks.Count % 2 == 0)
            {
                T = new Track(Type, P, 0, Color.Gray);
            }
            else
            {
                T = new Track(Type, P, 0, Color.Red);
            }
            Tracks.Add(T);
            Refresh();
        }

        //Events

        public void TrackMouseDownEvent(Object sender, MouseEventArgs e)
        {
            Point P = e.Location;
            RightClickLocation = e.Location;
            Drag.Reset();
            switch (e.Button)
            {
                case MouseButtons.Left:
                    for (int i = 0; i < Tracks.Count; i++)
                    {
                        for (int j = 0; j < Tracks[i].TrackObjects.Count; j++)
                        { 
                            if (Tracks[i].TrackObjects[j].ContainsBR(P) == true)
                            {
                                Cursor.Current = Cursors.SizeWE;

                                Drag.InitialLocation = P;
                                Drag.MoveRight = true;
                                Drag.InitialTrack = i;
                                Drag.InitialTrackObject = j;
                            }
                            else if (Tracks[i].TrackObjects[j].ContainsBL(P) == true)
                            {
                                Cursor.Current = Cursors.SizeWE;

                                Drag.InitialLocation = P;
                                Drag.MoveLeft = true;
                                Drag.InitialTrack = i;
                                Drag.InitialTrackObject = j;
                            }
                            else if (Tracks[i].TrackObjects[j].Contains(P) == true)
                            {
                                Cursor.Current = Cursors.SizeAll;
                                Drag.InitialLocation = P;
                                Drag.InitialTrack = i;
                                Drag.InitialTrackObject = j;
                                Drag.MoveLeft = false;
                                Drag.MoveRight = false;
                                Drag.MoveTopDown = false;
                                Drag.MoveCenterX = true;
                                Drag.MoveCenterY = true;
                            }
                        }
                        if (Tracks[i].ContainsBorder(P))
                        {
                            Cursor.Current = Cursors.SizeNS;
                            Drag.MoveTopDown = true;
                            Drag.MoveLeft = false;
                            Drag.MoveRight = false;
                            Drag.MoveTopDown = false;
                            Drag.MoveCenterX = false;
                            Drag.MoveCenterY = false;
                        }
                    }
                    break;

                case MouseButtons.Right:
                    bool OnTrack = true;
                    for (int i = 0; i < Tracks.Count; i++)
                    {
                        for(int j=0;j<Tracks[i].TrackObjects.Count;j++)
                        {
                            if(Tracks[i].TrackObjects[j].Contains(P))
                            {
                                OnTrack = false;
                            }
                        }
                        if (OnTrack == true)
                        {
                            if (Tracks[i].Contains(P) == true)
                            {
                                TrackRightClickContextMenuStrip.Show(this, RightClickLocation);
                            }
                        }
                    }
                    break;
            }
        }

        public void TrackMouseMoveEvent(Object sender, MouseEventArgs e)
        {
            if (Drag.MoveLeft == false && Drag.MoveRight == false)
            {
                if (Tracks.Count != 0)
                {
                    Point P = e.Location;
                    if (Drag.MoveCenterX == true && Drag.MoveCenterY == true)
                    {
                        if (Tracks[Drag.InitialTrack].Contains(P) && MouseButtons.Left == e.Button)
                        {
                            Drag.MoveCenterY = false;
                            Drag.MoveCenterX = true;
                            Drag.MoveRight = false;
                            Drag.MoveLeft = false;
                            Drag.MoveTopDown = false;
                        }
                        else
                        {
                            Drag.MoveCenterX = false;
                            Drag.MoveCenterY = true;
                            Drag.MoveRight = false;
                            Drag.MoveLeft = false;
                            Drag.MoveTopDown = false;
                        }
                    }
                }
            }
        }

        public void TrackMouseUpEvent(Object sender, MouseEventArgs e)
        {
            Point P = e.Location;
            if (e.Button == MouseButtons.Left)
            {
                if (Drag.MoveRight == true)
                {
                    Cursor.Current = Cursors.SizeWE;
                    Drag.FinalLocation = P;
                    Tracks[Drag.InitialTrack].TrackObjects[Drag.InitialTrackObject].ResizeRight(Drag.ChangeX);
                    Drag.Reset();
                    Refresh();
                    Cursor.Current = Cursors.Default;
                }
                else if (Drag.MoveLeft == true)
                {
                    Cursor.Current = Cursors.SizeWE;
                    Drag.FinalLocation = P;
                    Tracks[Drag.InitialTrack].TrackObjects[Drag.InitialTrackObject].ResizeLeft(Drag.ChangeX);
                    Drag.Reset();
                    Refresh();
                    Cursor.Current = Cursors.Default;
                }
                else if (Drag.MoveCenterX == true)
                {
                    Cursor.Current = Cursors.SizeAll;
                    Drag.FinalLocation = P;
                    Tracks[Drag.InitialTrack].TrackObjects[Drag.InitialTrackObject].Move(Drag.ChangeX);
                    Drag.Reset();
                    Refresh();
                    Cursor.Current = Cursors.Default;
                }
                else if (Drag.MoveCenterY == true)
                {
                    Cursor.Current = Cursors.SizeAll;
                    for (int i = 0; i < Tracks.Count; i++)
                    {
                        if (Tracks[i].Contains(P))
                        {
                            Drag.TO = Tracks[Drag.InitialTrack].TrackObjects[Drag.InitialTrackObject];
                            Drag.FinalTrack = i;
                        }
                    }
                    Tracks[Drag.InitialTrack].TrackObjects.RemoveAt(Drag.InitialTrackObject);
                    Tracks[Drag.FinalTrack].AddTrackObject(Drag.TO);
                    Drag.Reset();
                    Refresh();
                    Cursor.Current = Cursors.Default;
                }
                else if(Drag.MoveTopDown == true)
                {
                    Cursor.Current = Cursors.SizeNS;
                    _TrackSize.Height = _TrackSize.Height + Math.Abs(Drag.ChangeY);
                    Drag.Reset();
                    Refresh();
                }
            }
            Drag.Reset();
        }

        public void TrackMouseHoverEvent(object sender, MouseEventArgs e)
        {
            //Point P = e.
        }

        public void TrackRigthClickMenu(Object sender, ToolStripItemClickedEventArgs e)
        {
            ToolStripItem T = e.ClickedItem;
            switch (T.Text)
            {
                case "Add Track Object":
                    for (int i = 0; i < Tracks.Count; i++)
                    {
                        if (Tracks[i].TrackBox.Contains(RightClickLocation))
                        {
                            Tracks[i].TrackRightClick();
                            Refresh();
                            break;
                        }
                    }
                    break;
                case "Remove Track":
                    for (int i = 0; i < Tracks.Count; i++)
                    {
                        if (Tracks[i].TrackBox.Contains(RightClickLocation))
                        {
                            Tracks.RemoveAt(i);
                            for (int j = i; j < Tracks.Count; j++)
                            {
                                Tracks[j].Y = Tracks[j].Y - TrackSize.Height;
                            }
                            Refresh();
                            break;
                        }
                    }
                    break;
            }
        }

        public void VerticalTrackScrollBarValueChanged(object sender, EventArgs e)
        {
            Refresh();
        }

        public void AddNewTrack(Object sender, EventArgs e)
        {
            AddTrackUniversal();
        }

        //Component Deployers

        private void DeployTopMenuStrip()
        {

            /*
            AddTrack = new Button
            {
                Name = "AddTrack",
                Text = "Add Track",
                Location = new Point(0, 0),
                Height = 30,
                Width = 70
            };
            AddTrack.Click += AddNewTrack;
            Controls.Add(AddTrack);
            */
        }

        private void DeployTrackBar()
        {
            TrackBarTimeline = new TrackBar
            {
                Name = "TrackBarTimeline",
                Height = 45,
                Width = 1400,
                Value = 0,
                Maximum = 1400,
                Minimum = 0,
                AutoSize = true,
                LargeChange = 10,
                SmallChange = 2,
                TickFrequency = 10,
                Location = new Point(70, 0)
            };
            TrackBarTimeline.ValueChanged += TrackBarValueChanged;
            Controls.Add(TrackBarTimeline);
        }

        private void DeployTracks()
        {
            Tracks = new List<Track>();
            TrackSize = new Size(1400, 75);
            TrackRightClickContextMenuStrip = new ContextMenuStrip();
            TrackRightClickContextMenuStrip.Name = "TrackRightClickContextMenuStrip";
            ToolStripMenuItem AddTrackObject = new ToolStripMenuItem("Add Track Object");
            ToolStripMenuItem RemoveTrack = new ToolStripMenuItem("Remove Track");
            TrackRightClickContextMenuStrip.Items.Add(AddTrackObject);
            TrackRightClickContextMenuStrip.Items.Add(RemoveTrack);
            TrackRightClickContextMenuStrip.ItemClicked += TrackRigthClickMenu;
            AddTrackUniversal();
            AddTrackUniversal("Audio");
            AddTrackUniversal("Text");
            this.MouseMove += TrackMouseMoveEvent;
            this.MouseUp += TrackMouseUpEvent;
            this.MouseDown += TrackMouseDownEvent;
            //this.MouseEnter += TrackMouseHoverEvent;

        }

        private void DeployLowerMenuStrip()
        {


        }

        public Timeline()
        {
            //Deployed Components
            DeployTopMenuStrip();
            Tracks = new List<Track>();
           // DeployTrackBar();
           // DeployTracks();
            //DeployLowerMenuStrip();
           
            InitializeComponent();
        }

        //Component Draw

        protected override void OnPaint(PaintEventArgs pe)
        {
            base.OnPaint(pe);
            TopPanel.Draw(pe);
            
            if (VerticalTrackScrollBar == null)
            {
                if (Tracks != null)
                {
                    if (Tracks.Count == 0)
                    {

                    }
                    else
                    {
                        for (int i = 0; i < Tracks.Count; i++)
                        {
                            Tracks[i].DrawTrack(pe);
                        }
                        Seek.Count = Tracks.Count;
                        Seek.Value = TrackBarTimeline.Value;
                        Seek.Draw(pe);
                    }
                }
            }
        }
    }
}
